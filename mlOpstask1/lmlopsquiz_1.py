# -*- coding: utf-8 -*-
"""LMLOPSQUIZ1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dytzkCsO5amG3VJlWNN6tZ5S8-77RKUO
"""

data1=rescale(digits.images,0.25,anti_aliasing=False)
data2=rescale(digits.images,0.75,anti_aliasing=False)
data3=rescale(digits.images,1.25,anti_aliasing=False)

fig, axes = plt.subplots(nrows=2, ncols=2)
ax = axes.ravel()

ax[0].imshow(digits.images[0], cmap='gray')
ax[0].set_title("Original image")

ax[1].imshow(data1[0], cmap='gray')
ax[1].set_title("Rescaled 0.25")

ax[2].imshow(data2[0], cmap='gray')
ax[2].set_title("REscale 0.75")

ax[3].imshow(data3[0], cmap='gray')
ax[3].set_title("Rescale 1.25")

from skimage.transform import rescale, resize
import numpy as np
img1=np.zeros((n_samples,16,16))
img2=np.zeros((n_samples,4,4))
img3=np.zeros((n_samples,32,32))
for i in range(n_samples):
  img1[i]=resize(digits.images[i],(16,16),anti_aliasing=True)
  img2[i]=resize(digits.images[i],(4,4),anti_aliasing=True)
  img3[i]=resize(digits.images[i],(32,32),anti_aliasing=True)


n_sample1=len(img1)
n_sample2=len(img2)
n_sample3=len(img3)

data1 = img1.reshape((n_sample1, -1))
data2 = img2.reshape((n_sample2, -1))
data3= img3.reshape((n_sample3, -1))


X_train11, X_test11, y_train11, y_test11 = train_test_split(
    data1, digits.target, test_size=0.4, shuffle=False)
X_train21, X_test21, y_train21, y_test21 = train_test_split(
    data2, digits.target, test_size=0.4, shuffle=False)
X_train31, X_test31, y_train31, y_test31 = train_test_split(
    data3, digits.target, test_size=0.4, shuffle=False)

X_train12, X_test12, y_train12, y_test12 = train_test_split(
    data1, digits.target, test_size=0.3, shuffle=False)
X_train22, X_test22, y_train22, y_test22 = train_test_split(
    data2, digits.target, test_size=0.3, shuffle=False)
X_train32, X_test32, y_train32, y_test32 = train_test_split(
    data3, digits.target, test_size=0.3, shuffle=False)

X_train13, X_test13, y_train13, y_test13 = train_test_split(
    data1, digits.target, test_size=0.2, shuffle=False)
X_train23, X_test22, y_train22, y_test22 = train_test_split(
    data2, digits.target, test_size=0.2, shuffle=False)
X_train33, X_test33, y_train33, y_test33 = train_test_split(
    data3, digits.target, test_size=0.2, shuffle=False)



clf.fit(X_train11, y_train11)
predicted11 = clf.predict(X_test11)

clf.fit(X_train12, y_train12)
predicted12 = clf.predict(X_test12)

clf.fit(X_train13, y_train13)
predicted13 = clf.predict(X_test13)

clf.fit(X_train21, y_train21)
predicted21 = clf.predict(X_test21)

clf.fit(X_train21, y_train21)
predicted21 = clf.predict(X_test21)

clf.fit(X_train21, y_train21)
predicted21 = clf.predict(X_test21)

digits.images.shape

"""
================================
Recognizing hand-written digits
================================

This example shows how scikit-learn can be used to recognize images of
hand-written digits, from 0-9.
"""

print(__doc__)

# Author: Gael Varoquaux <gael dot varoquaux at normalesup dot org>
# License: BSD 3 clause

# Standard scientific Python imports
import matplotlib.pyplot as plt

# Import datasets, classifiers and performance metrics
from sklearn import datasets, svm, metrics
from sklearn.model_selection import train_test_split

###############################################################################
# Digits dataset
# --------------
#
# The digits dataset consists of 8x8
# pixel images of digits. The ``images`` attribute of the dataset stores
# 8x8 arrays of grayscale values for each image. We will use these arrays to
# visualize the first 4 images. The ``target`` attribute of the dataset stores
# the digit each image represents and this is included in the title of the 4
# plots below.
#
# Note: if we were working from image files (e.g., 'png' files), we would load
# them using :func:`matplotlib.pyplot.imread`.

digits = datasets.load_digits()

_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))
for ax, image, label in zip(axes, digits.images, digits.target):
    ax.set_axis_off()
    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')
    ax.set_title('Training: %i' % label)

###############################################################################
# Classification
# --------------
#
# To apply a classifier on this data, we need to flatten the images, turning
# each 2-D array of grayscale values from shape ``(8, 8)`` into shape
# ``(64,)``. Subsequently, the entire dataset will be of shape
# ``(n_samples, n_features)``, where ``n_samples`` is the number of images and
# ``n_features`` is the total number of pixels in each image.
#
# We can then split the data into train and test subsets and fit a support
# vector classifier on the train samples. The fitted classifier can
# subsequently be used to predict the value of the digit for the samples
# in the test subset.

# flatten the images
n_samples = len(digits.images)
data = digits.images.reshape((n_samples, -1))
#Added by poonam checkpoint 1 dimesion of the image
print("Dimension is: ",end=" ")
print(digits.images.shape)

from skimage.transform import rescale, resize
import numpy as np
img1=np.zeros((n_samples,16,16))
img2=np.zeros((n_samples,44,44))
img3=np.zeros((n_samples,32,32))
for i in range(n_samples):
  img1[i]=resize(digits.images[i],(16,16),anti_aliasing=True)
  img2[i]=resize(digits.images[i],(44,44),anti_aliasing=True)
  img3[i]=resize(digits.images[i],(32,32),anti_aliasing=True)


n_sample1=len(img1)
n_sample2=len(img2)
n_sample3=len(img3)

data1 = img1.reshape((n_sample1, -1))
data2 = img2.reshape((n_sample2, -1))
data3= img3.reshape((n_sample3, -1))


X_train11, X_test11, y_train11, y_test11 = train_test_split(
    data1, digits.target, test_size=0.4, shuffle=False)
X_train21, X_test21, y_train21, y_test21 = train_test_split(
    data2, digits.target, test_size=0.4, shuffle=False)
X_train31, X_test31, y_train31, y_test31 = train_test_split(
    data3, digits.target, test_size=0.4, shuffle=False)

X_train12, X_test12, y_train12, y_test12 = train_test_split(
    data1, digits.target, test_size=0.3, shuffle=False)
X_train22, X_test22, y_train22, y_test22 = train_test_split(
    data2, digits.target, test_size=0.3, shuffle=False)
X_train32, X_test32, y_train32, y_test32 = train_test_split(
    data3, digits.target, test_size=0.3, shuffle=False)

X_train13, X_test13, y_train13, y_test13 = train_test_split(
    data1, digits.target, test_size=0.2, shuffle=False)
X_train23, X_test22, y_train22, y_test22 = train_test_split(
    data2, digits.target, test_size=0.2, shuffle=False)
X_train33, X_test33, y_train33, y_test33 = train_test_split(
    data3, digits.target, test_size=0.2, shuffle=False)











# Create a classifier: a support vector classifier
clf = svm.SVC(gamma=0.001)

# Split data into 50% train and 50% test subsets
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.5, shuffle=False)

# Learn the digits on the train subset
clf.fit(X_train, y_train)

# Predict the value of the digit on the test subset
predicted = clf.predict(X_test)


clf.fit(X_train11, y_train11)
predicted11 = clf.predict(X_test11)

clf.fit(X_train12, y_train12)
predicted12 = clf.predict(X_test12)

clf.fit(X_train13, y_train13)
predicted13 = clf.predict(X_test13)

clf.fit(X_train21, y_train21)
predicted21 = clf.predict(X_test21)
print("for 60:40 resize1 ", predicted11)
print("for 60:40 resize1 ", predicted12)
print("for 60:40 resize2 ", predicted13)
print("for 60:40 resize3 ", predicted21)



###############################################################################
# Below we visualize the first 4 test samples and show their predicted
# digit value in the title.

_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))
for ax, image, prediction in zip(axes, X_test, predicted):
    ax.set_axis_off()
    image = image.reshape(8, 8)
    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')
    ax.set_title(f'Prediction: {prediction}')

###############################################################################
# :func:`~sklearn.metrics.classification_report` builds a text report showing
# the main classification metrics.

print(f"Classification report for classifier {clf}:\n"
      f"{metrics.classification_report(y_test, predicted)}\n")

###############################################################################
# We can also plot a :ref:`confusion matrix <confusion_matrix>` of the
# true digit values and the predicted digit values.

disp = metrics.plot_confusion_matrix(clf, X_test, y_test)
disp.figure_.suptitle("Confusion Matrix")
print(f"Confusion matrix:\n{disp.confusion_matrix}")

plt.show()